name: Comprehensive Rust CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security audit

# Minimal permissions for enhanced security
permissions:
  contents: read
  checks: write
  pull-requests: write

# Global environment variables
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  RUST_BACKTRACE: 1

# Workflow jobs
jobs:
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-lint-

      - name: Check Code Formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy Linter
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test Suite
    needs: lint-and-format
    strategy:
      fail-fast: false  # Continue other matrix jobs if one fails
      matrix:
        os: [ubuntu-24.04]
        rust: [stable, beta]
        include:
          - os: ubuntu-24.04
            rust: nightly
            experimental: true

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-test-${{ matrix.rust }}-

      - name: Run Tests
        run: |
          cargo test --all-features --verbose
          cargo test --all-features --no-run  # Ensure all targets compile

  coverage:
    name: Code Coverage
    needs: test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate Coverage Report
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 120 \
            --out Xml \
            --ignore-tests

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  security-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Cargo Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  release-please:
    name: Release Management
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Release Please
        uses: google-github-actions/release-please-action@v4
        with:
          release-type: rust
          package-name: ${{ github.event.repository.name }}

# Optional: Uncommment if you want to publish to crates.io
#  publish:
#    name: Publish to Crates.io
#    needs: [test, coverage, security-audit]
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
#    runs-on: ubuntu-24.04
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Setup Rust
#        uses: dtolnay/rust-toolchain@stable
#
#      - name: Publish to Crates.io
#        env:
#          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
#        run: cargo publish