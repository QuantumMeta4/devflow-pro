name: Rust CI/CD Pipeline

# Trigger workflow on key events
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  # Weekly dependency and security check
  schedule:
    - cron: '0 0 * * 0'

# Comprehensive permissions for workflow interactions
permissions:
  contents: read
  pull-requests: write
  checks: write

# Global environment configuration
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  RUST_BACKTRACE: 1

jobs:
  # Initial code quality and style checks
  lint-and-format:
    name: Code Quality Check
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-quality-${{ hashFiles('**/Cargo.lock') }}

      - name: Check Formatting
        run: cargo fmt -- --check

      - name: Clippy Linting
        run: >
          cargo clippy 
          --all-targets 
          --all-features 
          -- 
          -D warnings 
          -W clippy::pedantic 
          -W clippy::nursery

  # Comprehensive testing strategy
  test:
    name: Test Suite
    needs: lint-and-format
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        rust: [stable, beta]
        include:
          - os: ubuntu-24.04
            rust: nightly
            experimental: true

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental || false }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Rust Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-rust-test-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Run Tests
        run: |
          cargo test --all-features --verbose
          cargo test --all-features --no-run

  # Code coverage analysis
  coverage:
    name: Code Coverage
    needs: test
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate Coverage Report
        run: |
          cargo tarpaulin \
            --verbose \
            --all-features \
            --workspace \
            --timeout 120 \
            --out Xml

      - name: Upload to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./cobertura.xml
          fail_ci_if_error: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Security vulnerability scanning
  security-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Security Audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Automated release management
  release-please:
    name: Release Management
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, coverage, security-audit]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Release Please
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: rust